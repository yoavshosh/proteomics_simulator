import argparse
import subprocess
import time
import os
from os import listdir
from os.path import isfile, join

def write_mqpar_file(raw_files_path,raw_files,fasta_files,fdr,min_pep_len,max_mass,max_mc,enzymes,mqpar_name):
    """
    This function writes the mapar file requiered by MaxQuant
    raw_files_path - is the directory of all rawfiles where mqpar is going to be created
    raw_files and fasta_files are list of full paths to raw files and fasta file respectively
    other parameters are just some of the parameters we can set on maxquant
    """
    n_raw_files = len(raw_files)
    
    with open(raw_files_path + 'mqpar_' + mqpar_name + '.xml', 'w') as f:

        f.write('<?xml version="1.0" encoding="utf-8"?>\n')
        f.write('<MaxQuantParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n')
        
        f.write('   <fastaFiles>\n')
        for file in fasta_files:
            f.write('      <FastaFileInfo>\n')
            f.write('         <fastaFilePath>'+file+'</fastaFilePath>\n')
            f.write('         <identifierParseRule>>([^\s]*)</identifierParseRule>\n')
            f.write('         <descriptionParseRule>>(.*)</descriptionParseRule>\n')
            f.write('         <taxonomyParseRule></taxonomyParseRule>\n')
            f.write('         <variationParseRule></variationParseRule>\n')
            f.write('         <modificationParseRule></modificationParseRule>\n')
            f.write('         <taxonomyId></taxonomyId>\n')
            f.write('      </FastaFileInfo>\n')
        f.write('   </fastaFiles>\n')
        
        f.write('   <fastaFilesProteogenomics>\n')
        f.write('   </fastaFilesProteogenomics>\n')
        f.write('   <fastaFilesFirstSearch>\n')
        f.write('   </fastaFilesFirstSearch>\n')
        f.write('   <fixedSearchFolder></fixedSearchFolder>\n')
        f.write('   <andromedaCacheSize>350000</andromedaCacheSize>\n')
        f.write('   <advancedRatios>True</advancedRatios>\n')
        f.write('   <pvalThres>0.005</pvalThres>\n')
        f.write('   <neucodeRatioBasedQuantification>False</neucodeRatioBasedQuantification>\n')
        f.write('   <neucodeStabilizeLargeRatios>False</neucodeStabilizeLargeRatios>\n')
        f.write('   <rtShift>False</rtShift>\n')
        f.write('   <separateLfq>False</separateLfq>\n')
        f.write('   <lfqStabilizeLargeRatios>True</lfqStabilizeLargeRatios>\n')
        f.write('   <lfqRequireMsms>True</lfqRequireMsms>\n')
        f.write('   <decoyMode>revert</decoyMode>\n')
        f.write('   <boxCarMode>all</boxCarMode>\n')
        f.write('   <includeContaminants>True</includeContaminants>\n')
        f.write('   <maxPeptideMass>'+str(max_pep_mass)+'</maxPeptideMass>\n')
        f.write('   <epsilonMutationScore>True</epsilonMutationScore>\n')
        f.write('   <mutatedPeptidesSeparately>True</mutatedPeptidesSeparately>\n')
        f.write('   <proteogenomicPeptidesSeparately>True</proteogenomicPeptidesSeparately>\n')
        f.write('   <minDeltaScoreUnmodifiedPeptides>0</minDeltaScoreUnmodifiedPeptides>\n')
        f.write('   <minDeltaScoreModifiedPeptides>6</minDeltaScoreModifiedPeptides>\n')
        f.write('   <minScoreUnmodifiedPeptides>0</minScoreUnmodifiedPeptides>\n')
        f.write('   <minScoreModifiedPeptides>40</minScoreModifiedPeptides>\n')
        f.write('   <secondPeptide>True</secondPeptide>\n')
        f.write('   <matchBetweenRuns>False</matchBetweenRuns>\n')
        f.write('   <matchUnidentifiedFeatures>False</matchUnidentifiedFeatures>\n')
        f.write('   <matchBetweenRunsFdr>False</matchBetweenRunsFdr>\n')
        f.write('   <dependentPeptides>False</dependentPeptides>\n')
        f.write('   <dependentPeptideFdr>0</dependentPeptideFdr>\n')
        f.write('   <dependentPeptideMassBin>0</dependentPeptideMassBin>\n')
        f.write('   <dependentPeptidesBetweenRuns>False</dependentPeptidesBetweenRuns>\n')
        f.write('   <dependentPeptidesWithinExperiment>False</dependentPeptidesWithinExperiment>\n')
        f.write('   <dependentPeptidesWithinParameterGroup>False</dependentPeptidesWithinParameterGroup>\n')
        f.write('   <dependentPeptidesRestrictFractions>False</dependentPeptidesRestrictFractions>\n')
        f.write('   <dependentPeptidesFractionDifference>0</dependentPeptidesFractionDifference>\n')
        f.write('   <msmsConnection>False</msmsConnection>\n')
        f.write('   <ibaq>False</ibaq>\n')
        f.write('   <top3>False</top3>\n')
        f.write('   <independentEnzymes>False</independentEnzymes>\n')
        f.write('   <useDeltaScore>False</useDeltaScore>\n')
        f.write('   <splitProteinGroupsByTaxonomy>False</splitProteinGroupsByTaxonomy>\n')
        f.write('   <taxonomyLevel>Species</taxonomyLevel>\n')
        f.write('   <avalon>False</avalon>\n')
        f.write('   <nModColumns>3</nModColumns>\n')
        f.write('   <ibaqLogFit>False</ibaqLogFit>\n')
        f.write('   <razorProteinFdr>True</razorProteinFdr>\n')
        f.write('   <deNovoSequencing>False</deNovoSequencing>\n')
        f.write('   <deNovoVarMods>True</deNovoVarMods>\n')
        f.write('   <massDifferenceSearch>False</massDifferenceSearch>\n')
        f.write('   <isotopeCalc>False</isotopeCalc>\n')
        f.write('   <writePeptidesForSpectrumFile></writePeptidesForSpectrumFile>\n')
        f.write('   <intensityPredictionsFile>\n')
        f.write('   </intensityPredictionsFile>\n')
        f.write('   <minPepLen>'+str(min_pep_len)+'</minPepLen>\n')
        f.write('   <psmFdrCrosslink>'+str(fdr)+'</psmFdrCrosslink>\n')
        f.write('   <peptideFdr>'+str(fdr)+'</peptideFdr>\n')
        f.write('   <proteinFdr>'+str(fdr)+'</proteinFdr>\n')
        f.write('   <siteFdr>'+str(fdr)+'</siteFdr>\n')
        f.write('   <minPeptideLengthForUnspecificSearch>8</minPeptideLengthForUnspecificSearch>\n')
        f.write('   <maxPeptideLengthForUnspecificSearch>25</maxPeptideLengthForUnspecificSearch>\n')
        f.write('   <useNormRatiosForOccupancy>True</useNormRatiosForOccupancy>\n')
        f.write('   <minPeptides>1</minPeptides>\n')
        f.write('   <minRazorPeptides>1</minRazorPeptides>\n')
        f.write('   <minUniquePeptides>0</minUniquePeptides>\n')
        f.write('   <useCounterparts>False</useCounterparts>\n')
        f.write('   <advancedSiteIntensities>True</advancedSiteIntensities>\n')
        f.write('   <customProteinQuantification>False</customProteinQuantification>\n')
        f.write('   <customProteinQuantificationFile></customProteinQuantificationFile>\n')
        f.write('   <minRatioCount>2</minRatioCount>\n')
        f.write('   <restrictProteinQuantification>True</restrictProteinQuantification>\n')
        f.write('   <restrictMods>\n')
        f.write('      <string>Oxidation (M)</string>\n')
        f.write('      <string>Acetyl (Protein N-term)</string>\n')
        f.write('   </restrictMods>\n')
        f.write('   <matchingTimeWindow>0</matchingTimeWindow>\n')
        f.write('   <alignmentTimeWindow>0</alignmentTimeWindow>\n')
        f.write('   <numberOfCandidatesMultiplexedMsms>25</numberOfCandidatesMultiplexedMsms>\n')
        f.write('   <numberOfCandidatesMsms>15</numberOfCandidatesMsms>\n')
        f.write('   <compositionPrediction>0</compositionPrediction>\n')
        f.write('   <quantMode>1</quantMode>\n')
        f.write('   <massDifferenceMods>\n')
        f.write('   </massDifferenceMods>\n')
        f.write('   <mainSearchMaxCombinations>200</mainSearchMaxCombinations>\n')
        f.write('   <writeMsScansTable>False</writeMsScansTable>\n')
        f.write('   <writeMsmsScansTable>True</writeMsmsScansTable>\n')
        f.write('   <writePasefMsmsScansTable>True</writePasefMsmsScansTable>\n')
        f.write('   <writeAccumulatedPasefMsmsScansTable>True</writeAccumulatedPasefMsmsScansTable>\n')
        f.write('   <writeMs3ScansTable>True</writeMs3ScansTable>\n')
        f.write('   <writeAllPeptidesTable>True</writeAllPeptidesTable>\n')
        f.write('   <writeMzRangeTable>True</writeMzRangeTable>\n')
        f.write('   <writeMzTab>False</writeMzTab>\n')
        f.write('   <disableMd5>False</disableMd5>\n')
        f.write('   <cacheBinInds>True</cacheBinInds>\n')
        f.write('   <etdIncludeB>False</etdIncludeB>\n')
        f.write('   <complementaryTmtCollapseNplets>True</complementaryTmtCollapseNplets>\n')
        f.write('   <stackPeaks>False</stackPeaks>\n')
        f.write('   <ms2PrecursorShift>0</ms2PrecursorShift>\n')
        f.write('   <complementaryIonPpm>20</complementaryIonPpm>\n')
        f.write('   <variationParseRule></variationParseRule>\n')
        f.write('   <variationMode>none</variationMode>\n')
        f.write('   <useSeriesReporters>False</useSeriesReporters>\n')
        f.write('   <name>session1</name>\n')
        f.write('   <maxQuantVersion>1.6.3.4</maxQuantVersion>\n')
        f.write('   <tempFolder></tempFolder>\n')
        f.write('   <pluginFolder></pluginFolder>\n')
        f.write('   <numThreads>1</numThreads>\n')
        f.write('   <emailAddress></emailAddress>\n')
        f.write('   <smtpHost></smtpHost>\n')
        f.write('   <emailFromAddress></emailFromAddress>\n')
        f.write('   <fixedCombinedFolder></fixedCombinedFolder>\n')
        f.write('   <fullMinMz>-1.79769313486232E+308</fullMinMz>\n')
        f.write('   <fullMaxMz>1.79769313486232E+308</fullMaxMz>\n')
        f.write('   <sendEmail>False</sendEmail>\n')
        f.write('   <ionCountIntensities>False</ionCountIntensities>\n')
        f.write('   <verboseColumnHeaders>False</verboseColumnHeaders>\n')
        f.write('   <calcPeakProperties>False</calcPeakProperties>\n')
        f.write('   <showCentroidMassDifferences>False</showCentroidMassDifferences>\n')
        f.write('   <showIsotopeMassDifferences>False</showIsotopeMassDifferences>\n')
        f.write('   <useDotNetCore>False</useDotNetCore>\n')
        
        f.write('   <filePaths>\n')
        for file in raw_files:
            f.write('      <string>'+file+'</string>\n')
        f.write('   </filePaths>\n')
        
        f.write('   <experiments>\n')
        for i in range(n_raw_files):
            f.write('      <string></string>\n')      
        f.write('   </experiments>\n')
        
        f.write('   <fractions>\n')
        for i in range(n_raw_files):
            f.write('      <short>32767</short>\n')
        f.write('   </fractions>\n')
           
        f.write('   <ptms>\n')
        for i in range(n_raw_files):
            f.write('      <boolean>False</boolean>\n')
        f.write('   </ptms>\n')
        
        f.write('   <paramGroupIndices>\n')
        for i in range(n_raw_files):
            f.write('      <int>0</int>\n')
        f.write('   </paramGroupIndices>\n')
        
        f.write('   <referenceChannel>\n')
        for i in range(n_raw_files):
            f.write('      <string></string>\n')      
        f.write('   </referenceChannel>\n')      
        
        f.write('   <parameterGroups>\n')
        f.write('      <parameterGroup>\n')
        f.write('         <msInstrument>0</msInstrument>\n')
        f.write('         <maxCharge>7</maxCharge>\n')
        f.write('         <minPeakLen>2</minPeakLen>\n')
        f.write('         <useMs1Centroids>False</useMs1Centroids>\n')
        f.write('         <useMs2Centroids>False</useMs2Centroids>\n')
        f.write('         <cutPeaks>True</cutPeaks>\n')
        f.write('         <gapScans>1</gapScans>\n')
        f.write('         <minTime>NaN</minTime>\n')
        f.write('         <maxTime>NaN</maxTime>\n')
        f.write('         <matchType>MatchFromAndTo</matchType>\n')
        f.write('         <intensityDetermination>0</intensityDetermination>\n')
        f.write('         <centroidMatchTol>8</centroidMatchTol>\n')
        f.write('         <centroidMatchTolInPpm>True</centroidMatchTolInPpm>\n')
        f.write('         <centroidHalfWidth>35</centroidHalfWidth>\n')
        f.write('         <centroidHalfWidthInPpm>True</centroidHalfWidthInPpm>\n')
        f.write('         <valleyFactor>1.4</valleyFactor>\n')
        f.write('         <isotopeValleyFactor>1.2</isotopeValleyFactor>\n')
        f.write('         <advancedPeakSplitting>False</advancedPeakSplitting>\n')
        f.write('         <intensityThreshold>0</intensityThreshold>\n')
        f.write('         <labelMods>\n')
        f.write('            <string></string>\n')
        f.write('         </labelMods>\n')
        f.write('         <lcmsRunType>Standard</lcmsRunType>\n')
        f.write('         <reQuantify>False</reQuantify>\n')
        f.write('         <lfqMode>0</lfqMode>\n')
        f.write('         <lfqSkipNorm>False</lfqSkipNorm>\n')
        f.write('         <lfqMinEdgesPerNode>3</lfqMinEdgesPerNode>\n')
        f.write('         <lfqAvEdgesPerNode>6</lfqAvEdgesPerNode>\n')
        f.write('         <lfqMaxFeatures>100000</lfqMaxFeatures>\n')
        f.write('         <neucodeMaxPpm>0</neucodeMaxPpm>\n')
        f.write('         <neucodeResolution>0</neucodeResolution>\n')
        f.write('         <neucodeResolutionInMda>False</neucodeResolutionInMda>\n')
        f.write('         <neucodeInSilicoLowRes>False</neucodeInSilicoLowRes>\n')
        f.write('         <fastLfq>True</fastLfq>\n')
        f.write('         <lfqRestrictFeatures>False</lfqRestrictFeatures>\n')
        f.write('         <lfqMinRatioCount>2</lfqMinRatioCount>\n')
        f.write('         <maxLabeledAa>0</maxLabeledAa>\n')
        f.write('         <maxNmods>5</maxNmods>\n')
        f.write('         <maxMissedCleavages>'+str(max_mc)+'</maxMissedCleavages>\n')
        f.write('         <multiplicity>1</multiplicity>\n')
        f.write('         <enzymeMode>0</enzymeMode>\n')
        f.write('         <complementaryReporterType>0</complementaryReporterType>\n')
        f.write('         <reporterNormalization>0</reporterNormalization>\n')
        f.write('         <neucodeIntensityMode>0</neucodeIntensityMode>\n')
        f.write('         <fixedModifications>\n')
        f.write('            <string>Carbamidomethyl (C)</string>\n')
        f.write('         </fixedModifications>\n')
        
        f.write('         <enzymes>\n')
        for enz in enzymes:
            f.write('            <string>'+enz+'</string>\n')
        f.write('         </enzymes>\n')
        
        f.write('         <enzymesFirstSearch>\n')
        f.write('         </enzymesFirstSearch>\n')
        f.write('         <enzymeModeFirstSearch>0</enzymeModeFirstSearch>\n')
        f.write('         <useEnzymeFirstSearch>False</useEnzymeFirstSearch>\n')
        f.write('         <useVariableModificationsFirstSearch>False</useVariableModificationsFirstSearch>\n')
        f.write('         <variableModifications>\n')
        f.write('            <string>Oxidation (M)</string>\n')
        f.write('            <string>Acetyl (Protein N-term)</string>\n')
        f.write('         </variableModifications>\n')
        f.write('         <useMultiModification>False</useMultiModification>\n')
        f.write('         <multiModifications>\n')
        f.write('         </multiModifications>\n')
        f.write('         <isobaricLabels>\n')
        f.write('         </isobaricLabels>\n')
        f.write('         <neucodeLabels>\n')
        f.write('         </neucodeLabels>\n')
        f.write('         <variableModificationsFirstSearch>\n')
        f.write('         </variableModificationsFirstSearch>\n')
        f.write('         <hasAdditionalVariableModifications>False</hasAdditionalVariableModifications>\n')
        f.write('         <additionalVariableModifications>\n')
        f.write('         </additionalVariableModifications>\n')
        f.write('         <additionalVariableModificationProteins>\n')
        f.write('         </additionalVariableModificationProteins>\n')
        f.write('         <doMassFiltering>True</doMassFiltering>\n')
        f.write('         <firstSearchTol>20</firstSearchTol>\n')
        f.write('         <mainSearchTol>4.5</mainSearchTol>\n')
        f.write('         <searchTolInPpm>True</searchTolInPpm>\n')
        f.write('         <isotopeMatchTol>2</isotopeMatchTol>\n')
        f.write('         <isotopeMatchTolInPpm>True</isotopeMatchTolInPpm>\n')
        f.write('         <isotopeTimeCorrelation>0.6</isotopeTimeCorrelation>\n')
        f.write('         <theorIsotopeCorrelation>0.6</theorIsotopeCorrelation>\n')
        f.write('         <checkMassDeficit>True</checkMassDeficit>\n')
        f.write('         <recalibrationInPpm>True</recalibrationInPpm>\n')
        f.write('         <intensityDependentCalibration>False</intensityDependentCalibration>\n')
        f.write('         <minScoreForCalibration>70</minScoreForCalibration>\n')
        f.write('         <matchLibraryFile>False</matchLibraryFile>\n')
        f.write('         <libraryFile></libraryFile>\n')
        f.write('         <matchLibraryMassTolPpm>0</matchLibraryMassTolPpm>\n')
        f.write('         <matchLibraryTimeTolMin>0</matchLibraryTimeTolMin>\n')
        f.write('         <matchLabelTimeTolMin>0</matchLabelTimeTolMin>\n')
        f.write('         <reporterMassTolerance>NaN</reporterMassTolerance>\n')
        f.write('         <reporterPif>NaN</reporterPif>\n')
        f.write('         <filterPif>False</filterPif>\n')
        f.write('         <reporterFraction>NaN</reporterFraction>\n')
        f.write('         <reporterBasePeakRatio>NaN</reporterBasePeakRatio>\n')
        f.write('         <timsHalfWidth>0</timsHalfWidth>\n')
        f.write('         <timsStep>0</timsStep>\n')
        f.write('         <timsResolution>0</timsResolution>\n')
        f.write('         <timsMinMsmsIntensity>0</timsMinMsmsIntensity>\n')
        f.write('         <timsRemovePrecursor>True</timsRemovePrecursor>\n')
        f.write('         <timsIsobaricLabels>False</timsIsobaricLabels>\n')
        f.write('         <timsCollapseMsms>True</timsCollapseMsms>\n')
        f.write('         <crosslinkSearch>False</crosslinkSearch>\n')
        f.write('         <crossLinker></crossLinker>\n')
        f.write('         <minMatchXl>0</minMatchXl>\n')
        f.write('         <minPairedPepLenXl>6</minPairedPepLenXl>\n')
        f.write('         <crosslinkOnlyIntraProtein>False</crosslinkOnlyIntraProtein>\n')
        f.write('         <crosslinkMaxMonoUnsaturated>0</crosslinkMaxMonoUnsaturated>\n')
        f.write('         <crosslinkMaxMonoSaturated>0</crosslinkMaxMonoSaturated>\n')
        f.write('         <crosslinkMaxDiUnsaturated>0</crosslinkMaxDiUnsaturated>\n')
        f.write('         <crosslinkMaxDiSaturated>0</crosslinkMaxDiSaturated>\n')
        f.write('         <crosslinkUseSeparateFasta>False</crosslinkUseSeparateFasta>\n')
        f.write('         <crosslinkCleaveModifications>\n')
        f.write('         </crosslinkCleaveModifications>\n')
        f.write('         <crosslinkFastaFiles>\n')
        f.write('         </crosslinkFastaFiles>\n')
        f.write('         <crosslinkMode>PeptidesWithCleavedLinker</crosslinkMode>\n')
        f.write('         <peakRefinement>False</peakRefinement>\n')
        f.write('         <isobaricSumOverWindow>True</isobaricSumOverWindow>\n')
        f.write('      </parameterGroup>\n')
        f.write('   </parameterGroups>\n')
        f.write('   <msmsParamsArray>\n')
        f.write('      <msmsParams>\n')
        f.write('         <Name>FTMS</Name>\n')
        f.write('         <MatchTolerance>20</MatchTolerance>\n')
        f.write('         <MatchToleranceInPpm>True</MatchToleranceInPpm>\n')
        f.write('         <DeisotopeTolerance>7</DeisotopeTolerance>\n')
        f.write('         <DeisotopeToleranceInPpm>True</DeisotopeToleranceInPpm>\n')
        f.write('         <DeNovoTolerance>10</DeNovoTolerance>\n')
        f.write('         <DeNovoToleranceInPpm>True</DeNovoToleranceInPpm>\n')
        f.write('         <Deisotope>True</Deisotope>\n')
        f.write('         <Topx>12</Topx>\n')
        f.write('         <TopxInterval>100</TopxInterval>\n')
        f.write('         <HigherCharges>True</HigherCharges>\n')
        f.write('         <IncludeWater>True</IncludeWater>\n')
        f.write('         <IncludeAmmonia>True</IncludeAmmonia>\n')
        f.write('         <DependentLosses>True</DependentLosses>\n')
        f.write('         <Recalibration>False</Recalibration>\n')
        f.write('      </msmsParams>\n')
        f.write('      <msmsParams>\n')
        f.write('         <Name>ITMS</Name>\n')
        f.write('         <MatchTolerance>0.5</MatchTolerance>\n')
        f.write('         <MatchToleranceInPpm>False</MatchToleranceInPpm>\n')
        f.write('         <DeisotopeTolerance>0.15</DeisotopeTolerance>\n')
        f.write('         <DeisotopeToleranceInPpm>False</DeisotopeToleranceInPpm>\n')
        f.write('         <DeNovoTolerance>0.25</DeNovoTolerance>\n')
        f.write('         <DeNovoToleranceInPpm>False</DeNovoToleranceInPpm>\n')
        f.write('         <Deisotope>False</Deisotope>\n')
        f.write('         <Topx>8</Topx>\n')
        f.write('         <TopxInterval>100</TopxInterval>\n')
        f.write('         <HigherCharges>True</HigherCharges>\n')
        f.write('         <IncludeWater>True</IncludeWater>\n')
        f.write('         <IncludeAmmonia>True</IncludeAmmonia>\n')
        f.write('         <DependentLosses>True</DependentLosses>\n')
        f.write('         <Recalibration>False</Recalibration>\n')
        f.write('      </msmsParams>\n')
        f.write('      <msmsParams>\n')
        f.write('         <Name>TOF</Name>\n')
        f.write('         <MatchTolerance>40</MatchTolerance>\n')
        f.write('         <MatchToleranceInPpm>True</MatchToleranceInPpm>\n')
        f.write('         <DeisotopeTolerance>0.01</DeisotopeTolerance>\n')
        f.write('         <DeisotopeToleranceInPpm>False</DeisotopeToleranceInPpm>\n')
        f.write('         <DeNovoTolerance>0.02</DeNovoTolerance>\n')
        f.write('         <DeNovoToleranceInPpm>False</DeNovoToleranceInPpm>\n')
        f.write('         <Deisotope>True</Deisotope>\n')
        f.write('         <Topx>10</Topx>\n')
        f.write('         <TopxInterval>100</TopxInterval>\n')
        f.write('         <HigherCharges>True</HigherCharges>\n')
        f.write('         <IncludeWater>True</IncludeWater>\n')
        f.write('         <IncludeAmmonia>True</IncludeAmmonia>\n')
        f.write('         <DependentLosses>True</DependentLosses>\n')
        f.write('         <Recalibration>False</Recalibration>\n')
        f.write('      </msmsParams>\n')
        f.write('      <msmsParams>\n')
        f.write('         <Name>Unknown</Name>\n')
        f.write('         <MatchTolerance>0.5</MatchTolerance>\n')
        f.write('         <MatchToleranceInPpm>False</MatchToleranceInPpm>\n')
        f.write('         <DeisotopeTolerance>0.15</DeisotopeTolerance>\n')
        f.write('         <DeisotopeToleranceInPpm>False</DeisotopeToleranceInPpm>\n')
        f.write('         <DeNovoTolerance>0.25</DeNovoTolerance>\n')
        f.write('         <DeNovoToleranceInPpm>False</DeNovoToleranceInPpm>\n')
        f.write('         <Deisotope>False</Deisotope>\n')
        f.write('         <Topx>8</Topx>\n')
        f.write('         <TopxInterval>100</TopxInterval>\n')
        f.write('         <HigherCharges>True</HigherCharges>\n')
        f.write('         <IncludeWater>True</IncludeWater>\n')
        f.write('         <IncludeAmmonia>True</IncludeAmmonia>\n')
        f.write('         <DependentLosses>True</DependentLosses>\n')
        f.write('         <Recalibration>False</Recalibration>\n')
        f.write('      </msmsParams>\n')
        f.write('   </msmsParamsArray>\n')
        f.write('   <fragmentationParamsArray>\n')
        f.write('      <fragmentationParams>\n')
        f.write('         <Name>CID</Name>\n')
        f.write('         <Connected>False</Connected>\n')
        f.write('         <ConnectedScore0>1</ConnectedScore0>\n')
        f.write('         <ConnectedScore1>1</ConnectedScore1>\n')
        f.write('         <ConnectedScore2>1</ConnectedScore2>\n')
        f.write('         <InternalFragments>False</InternalFragments>\n')
        f.write('         <InternalFragmentWeight>1</InternalFragmentWeight>\n')
        f.write('         <InternalFragmentAas>KRH</InternalFragmentAas>\n')
        f.write('      </fragmentationParams>\n')
        f.write('      <fragmentationParams>\n')
        f.write('         <Name>HCD</Name>\n')
        f.write('         <Connected>False</Connected>\n')
        f.write('         <ConnectedScore0>1</ConnectedScore0>\n')
        f.write('         <ConnectedScore1>1</ConnectedScore1>\n')
        f.write('         <ConnectedScore2>1</ConnectedScore2>\n')
        f.write('         <InternalFragments>False</InternalFragments>\n')
        f.write('         <InternalFragmentWeight>1</InternalFragmentWeight>\n')
        f.write('         <InternalFragmentAas>KRH</InternalFragmentAas>\n')
        f.write('      </fragmentationParams>\n')
        f.write('      <fragmentationParams>\n')
        f.write('         <Name>ETD</Name>\n')
        f.write('         <Connected>False</Connected>\n')
        f.write('         <ConnectedScore0>1</ConnectedScore0>\n')
        f.write('         <ConnectedScore1>1</ConnectedScore1>\n')
        f.write('         <ConnectedScore2>1</ConnectedScore2>\n')
        f.write('         <InternalFragments>False</InternalFragments>\n')
        f.write('         <InternalFragmentWeight>1</InternalFragmentWeight>\n')
        f.write('         <InternalFragmentAas>KRH</InternalFragmentAas>\n')
        f.write('      </fragmentationParams>\n')
        f.write('      <fragmentationParams>\n')
        f.write('         <Name>PQD</Name>\n')
        f.write('         <Connected>False</Connected>\n')
        f.write('         <ConnectedScore0>1</ConnectedScore0>\n')
        f.write('         <ConnectedScore1>1</ConnectedScore1>\n')
        f.write('         <ConnectedScore2>1</ConnectedScore2>\n')
        f.write('         <InternalFragments>False</InternalFragments>\n')
        f.write('         <InternalFragmentWeight>1</InternalFragmentWeight>\n')
        f.write('         <InternalFragmentAas>KRH</InternalFragmentAas>\n')
        f.write('      </fragmentationParams>\n')
        f.write('      <fragmentationParams>\n')
        f.write('         <Name>ETHCD</Name>\n')
        f.write('         <Connected>False</Connected>\n')
        f.write('         <ConnectedScore0>1</ConnectedScore0>\n')
        f.write('         <ConnectedScore1>1</ConnectedScore1>\n')
        f.write('         <ConnectedScore2>1</ConnectedScore2>\n')
        f.write('         <InternalFragments>False</InternalFragments>\n')
        f.write('         <InternalFragmentWeight>1</InternalFragmentWeight>\n')
        f.write('         <InternalFragmentAas>KRH</InternalFragmentAas>\n')
        f.write('      </fragmentationParams>\n')
        f.write('      <fragmentationParams>\n')
        f.write('         <Name>ETCID</Name>\n')
        f.write('         <Connected>False</Connected>\n')
        f.write('         <ConnectedScore0>1</ConnectedScore0>\n')
        f.write('         <ConnectedScore1>1</ConnectedScore1>\n')
        f.write('         <ConnectedScore2>1</ConnectedScore2>\n')
        f.write('         <InternalFragments>False</InternalFragments>\n')
        f.write('         <InternalFragmentWeight>1</InternalFragmentWeight>\n')
        f.write('         <InternalFragmentAas>KRH</InternalFragmentAas>\n')
        f.write('      </fragmentationParams>\n')
        f.write('      <fragmentationParams>\n')
        f.write('         <Name>UVPD</Name>\n')
        f.write('         <Connected>False</Connected>\n')
        f.write('         <ConnectedScore0>1</ConnectedScore0>\n')
        f.write('         <ConnectedScore1>1</ConnectedScore1>\n')
        f.write('         <ConnectedScore2>1</ConnectedScore2>\n')
        f.write('         <InternalFragments>False</InternalFragments>\n')
        f.write('         <InternalFragmentWeight>1</InternalFragmentWeight>\n')
        f.write('         <InternalFragmentAas>KRH</InternalFragmentAas>\n')
        f.write('      </fragmentationParams>\n')
        f.write('      <fragmentationParams>\n')
        f.write('         <Name>Unknown</Name>\n')
        f.write('         <Connected>False</Connected>\n')
        f.write('         <ConnectedScore0>1</ConnectedScore0>\n')
        f.write('         <ConnectedScore1>1</ConnectedScore1>\n')
        f.write('         <ConnectedScore2>1</ConnectedScore2>\n')
        f.write('         <InternalFragments>False</InternalFragments>\n')
        f.write('         <InternalFragmentWeight>1</InternalFragmentWeight>\n')
        f.write('         <InternalFragmentAas>KRH</InternalFragmentAas>\n')
        f.write('      </fragmentationParams>\n')
        f.write('   </fragmentationParamsArray>\n')
        f.write('</MaxQuantParams>\n')
        
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Preparation of parameters file for MaxQuant')
    run_parser = parser.add_argument_group('Run mqpar prep')
    run_parser.add_argument('-raw_path', dest='raw_files_path', action='store', required = True, help='Path to raw input directory')
    run_parser.add_argument('-fasta_files', dest='fasta_files', action='store', nargs='+', required = True, help='list of fasta files with spaces between')
    run_parser.add_argument('-fdr', dest='fdr', action='store', default = '0.05', help='FDR for peptides detection - for now it is the fdr of psmFdrCrosslink\proteins\peptides\sites detection')
    run_parser.add_argument('-min_aa', dest='min_pep_len', action='store', default = '7', help='Minimal number of amino acids per peptide')
    run_parser.add_argument('-max_mass', dest='max_pep_mass', action='store', default = '4600', help='Maximal peptides mass')
    run_parser.add_argument('-max_mc', dest='max_mc', action='store', default = '2', help='maximal number of missed cleavages per peptide')
    run_parser.add_argument('-enz', dest='enzymes', action='store', nargs='+', default = 'trypsin', help='enzymes used for cleavage for peptides search. type unspecific for unspecific')
    run_parser.add_argument('-o', dest='output_name', action='store', default = 'combined', help='mqpar and log files name and combined directory (MQ output) name')
    run_parser.add_argument('-run_mq', dest='run_maxquant', action='store', default = 'True', help='run MaxQuant right after mqpar preparation')
    arguments = parser.parse_args()
    
    raw_files_path = arguments.raw_files_path
    fasta_files = arguments.fasta_files
    fdr = eval(arguments.fdr)
    min_pep_len = eval(arguments.min_pep_len)
    max_pep_mass = eval(arguments.max_pep_mass)
    max_mc = eval(arguments.max_mc)
    output_name = arguments.output_name
    run_maxquant = eval(arguments.run_maxquant)
    enzymes = arguments.enzymes
    
    if enzymes == 'unspecific':
        enzymes = []
    if enzymes == 'trypsin':
        enzymes = ['Trypsin/P']
    
    files_in_raw_dir = [f for f in listdir(raw_files_path) if isfile(join(raw_files_path, f))] #all files in raw directory
    raw_files = [raw_files_path + f for f in files_in_raw_dir if (f[-4:]=='.raw' or f[-4:]=='.RAW' or f[-5:] == '.wiff' or f[-5:] == '.uimf' or f[-6:] == '.mzxml' or f[-6:] == '.mzXML')] #all raw files - full paths
    
    write_mqpar_file(raw_files_path,raw_files,fasta_files,fdr,min_pep_len,max_pep_mass,max_mc, enzymes, mqpar_name = output_name)
    
    if run_maxquant:
    
        mq_cmd = 'nohup mono /private/common/Software/MaxQuant/Centos7/MaxQuant/bin/MaxQuantCmd.exe ' + raw_files_path + 'mqpar_' + output_name + '.xml' + ' > ' + raw_files_path + 'nohup_' + output_name + '.out'
        
        try:
            p = subprocess.Popen(mq_cmd, shell = True, universal_newlines = True, stdout=subprocess.PIPE)
            rc = p.poll()
            exit(0)
                      
        except subprocess.CalledProcessError as e:
            err_file = open(raw_files_path + 'err_log.txt','a')
            print(e.output.decode())
            err_file.write(e.output.decode()+'\n')
            err_file.close()
            exit(1)
    
# =============================================================================
#     #wait until process is finished (could't use p.poll here as first mono process calls many other subprocesses and terminate early)
#     while rc==0:
#         last_nohup_line = subprocess.check_output(['tail', '-1', raw_files_path + 'nohup_' + output_name + '.out'])
#         if 'Finish writing tables' in last_nohup_line:
#             break
#         else:
#             time.sleep(1.5)
#     #change combined directory name to output_name after MaxQuant is finished
#     try:
#         os.rename(raw_files_path+'combined', raw_files_path + 'combined_' + output_name)
#         print('MaxQuant output directory was changed')
#     except Exception as e:
#         err_file = open(raw_files_path + 'err_log.txt','a')
#         err_file.write('\nCould not change output direcroty name\n')
#         err_file.write(str(e)+'\n')
#         err_file.close()
#         exit(1)
#         
# =============================================================================
    
    